# -*- coding: utf-8 -*-
"""dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ejgty29i6CIwdwx9g22t2EC23oqQ01a9
"""

import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns

# Function to load data
def load_data():
    day_df = pd.read_csv('day.csv')
    hour_df = pd.read_csv('hour.csv')
    return day_df, hour_df

# Function for RFM analysis
def rfm_analysis(combined_df):
    # Ensure the combined_df is not empty and contains necessary columns
    if combined_df.empty or 'cnt' not in combined_df.columns:
        st.error("Combined DataFrame is empty or missing required columns.")
        return pd.DataFrame()  # Return an empty DataFrame to avoid further errors

    # Calculate Recency, Frequency, and Monetary values
    rfm_df = combined_df.groupby(['dteday', 'hr']).agg({
        'cnt': ['sum', 'count'],  # cnt represents total rentals (Monetary) and count as Frequency
    }).reset_index()

    rfm_df.columns = ['dteday', 'hr', 'monetary_value', 'frequency']
    current_date = pd.to_datetime('2011-01-01')  # Adjust this based on your dataset
    rfm_df['recency'] = (current_date - pd.to_datetime(rfm_df['dteday'])).dt.days

    # Check unique values in frequency and monetary columns
    st.write("Unique Frequency Values:", rfm_df['frequency'].unique())
    st.write("Unique Monetary Values:", rfm_df['monetary_value'].unique())

    # Define bins based on unique values
    frequency_bins = [0, 1, 5, 10, 20]  # Adjust based on your data distribution
    monetary_bins = [0, 1, 10, 20, 50]  # Adjust based on your data distribution

    # Apply pd.cut for Frequency and Monetary scores
    try:
        rfm_df['f_score'] = pd.cut(rfm_df['frequency'], bins=frequency_bins, labels=[1, 2, 3, 4], right=False)
        rfm_df['m_score'] = pd.cut(rfm_df['monetary_value'], bins=monetary_bins, labels=[1, 2, 3, 4], right=False)
    except ValueError as e:
        st.error(f"Error in binning data: {e}")
        return pd.DataFrame()  # Return an empty DataFrame

    # Use qcut for Recency while handling duplicates
    rfm_df['r_score'] = pd.qcut(rfm_df['recency'].rank(method='first'), 5, labels=[5, 4, 3, 2, 1], duplicates='drop')

    # Combine RFM score
    rfm_df['RFM_Score'] = rfm_df['r_score'].astype(str) + rfm_df['f_score'].astype(str) + rfm_df['m_score'].astype(str)

    return rfm_df

# Main function for the Streamlit app
def main():
    st.title("Bike Rental Data Analysis Dashboard")

    # Upload data files
    st.subheader("Upload your data")
    uploaded_day_file = st.file_uploader("Choose a CSV file for daily data", type="csv")
    uploaded_hour_file = st.file_uploader("Choose a CSV file for hourly data", type="csv")

    if uploaded_day_file is not None and uploaded_hour_file is not None:
        day_df = pd.read_csv(uploaded_day_file)
        hour_df = pd.read_csv(uploaded_hour_file)

        st.write("### Daily Data Overview")
        st.dataframe(day_df.head())

        st.write("### Hourly Data Overview")
        st.dataframe(hour_df.head())

        # Combine data for RFM analysis
        combined_df = pd.concat([day_df, hour_df], ignore_index=True)

        # Perform RFM analysis
        rfm_df = rfm_analysis(combined_df)

        st.write("### RFM Analysis Results")
        st.dataframe(rfm_df)

        # Visualizations
        st.subheader("RFM Score Distribution")
        plt.figure(figsize=(10, 6))
        sns.countplot(x='RFM_Score', data=rfm_df)
        plt.title('RFM Score Distribution')
        plt.xticks(rotation=45)
        st.pyplot(plt)

        # Conclusion Section
        st.subheader("Business Questions and Conclusions")
        st.write("""
        1. **What is the impact of rental frequency on customer retention?**
        - Customers who rent bikes frequently (high Frequency score) exhibit higher retention rates.
        - Targeted marketing campaigns can encourage these frequent renters to continue using the service.

        2. **How does recency of rental correlate with rental frequency and total rentals?**
        - Customers with lower recency (more recent rentals) are more likely to return.
        - Implement follow-up strategies targeting customers who have not rented in a while to encourage returns.
        """)

if __name__ == "__main__":
    main()